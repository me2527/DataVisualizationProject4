# -*- coding: utf-8 -*-
"""Project4_DataVisualisation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJdXsgNDGIy5uxQzTtnDMViQ7NNUb0kt

# Project 4: Data Visualisation

### Overview

In this project, you have to create a DataFrame for a synthesized dataset and perform some basic mathematical operations before on the dataset provided to you before you get your hands dirty on a real-life dataset in the subsequent classes.

---

### Project Requirements

For this project, you have to do the following tasks:

1. Create a DataFrame for a `csv` file which is available at the link:

  https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-3/sample_csv_file.csv

2. Display the first 5 rows of the DataFrame.

3. Display the last 5 rows of the DataFrame.

4. Find the number of rows and columns.

5. Check for the missing values in the DataFrame.

6. Create a pandas series called `cum_freq_x1` which contains the cumulative frequency of the `x1` values and print the first 10 values of the series. Also, verify whether it is a pandas series.

7. Print the minimum, maximum, mean, median and mode values for the `cum_freq_x1` Pandas series.

8. Create a scatter plot and a line plot between:
  
  - `y` and `x1`
  
  - `y` and `x2`
  
  - `y` and `x3`
  
  - `y` and `x4`
  
  - `y` and `2 * x1 + 3 * x2 + 4 * x3 + 5 * x4`
  
  such that the `y` values are plotted on the horizontal axis and `x1, x2, x3, 4` values are plotted on the vertical axis.

---

#### 1. Create a DataFrame

Import the required modules. Create a DataFrame for the dataset for this project and store it in the `df` variable. Here's the link to the dataset:

https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-3/sample_csv_file.csv
"""

# Write your code here.
import pandas as pd
student_training_df=pd.read_csv("https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-3/sample_csv_file.csv")
print(student_training_df)

"""---

#### 2. Display The First 5 Rows

Here you have to display the first five rows of the `df` DataFrame.
"""

# Write your code here.
print("First 5 data from the dataframe:")
student_training_df.head()

"""---

#### 3. Display The Last 5 Rows

Here you have to display the last five rows of the `df` DataFrame.
"""

# Write your code here.
print("Last 5 datas from the dataframe:")
student_training_df.tail()

"""---

#### 4. Display Number Of Rows & Columns

Now, display the number of rows and columns that are present in the `df` DataFrame.
"""

# Write your code here.
print("Number of rows and columns in the dataframe:")
student_training_df.shape

"""---

#### 5. Check For The Missing Values

Check whether the `df` DataFrame contains the missing values.
"""

# Write your code here.
print("Find Missing Values In The Dataframe:")
student_training_df.isnull()

"""---

#### 6. Cumulative Frequency

The cumulative frequency is the sum of the current and the previous frequencies.

Suppose there are 50 students in your class. The table below shows the distribution of the number of students scored marks out of 100 in a Math test in a particular range.

|Interval|Frequency|
|-|-|
|40-50|5|
|50-60|11|
|60-70|13|
|70-80|11|
|80-90|8|
|90-100|2|

So, there are

- 5 students who have scored marks between 40 and 50 (excluding 50)

- 11 students who have scored marks between 50 and 60 (excluding 60)

- 13 students who have scored marks between 60 and 70 (excluding 70)

- 11 students who have scored marks between 70 and 80 (excluding 80)

- 8 students who have scored marks between 80 and 90 (excluding 90)

- 2 students who have scored marks between 90 and 100 (**including** 100)

The cumulative frequency table for the above table is:

|Interval|Frequency|Cumulative Frequency|
|-|-|-|
|40-50|5|5|
|50-60|11|5 + 11 = 16|
|60-70|13|16 + 13 = 29|
|70-80|11|29 + 11 = 40|
|80-90|8|40 + 8 = 48|
|90-100|2|48 + 2 = 50|

So, the cumulative frequency table tells us that there are

- 5 students who have secured marks between 40 and 50 (excluding 50)

- 16 students who have secured marks between 40 and 60 (excluding 60)

- 29 students who have secured marks between 40 and 70 (excluding 70)

- 40 students who have secured marks between 40 and 80 (excluding 80)

- 48 students who have secured marks between 40 and 90 (excluding 90)

- 50 students who have secured marks between 40 and 100 (**including** 100)
"""

#to find the cumulative frequency of x1 from the given data frame.
#method1
cum_freq_x1=[]
cum=0
for i in range (499):
    cum=cum+student_training_df['x1'][i]
    cum_freq_x1.append(cum)
cum_freq_x1=pd.Series(cum_freq_x1)
print(type(cum_freq_x1))
print("CUMULATIVE FREQUENCY OF X1 :")
cum_freq_x1.head(10)

"""---

#### 7. Minimum, Maximum, Mean And Median Values

Now, print the minumum, maximum, mean and median values in the `x1` column in the `df` DataFrame.
"""

# Write your code here.
print("Mean:",student_training_df['x1'].mean())
print("Median:",student_training_df['x1'].median())
print("Minimum:",student_training_df['x1'].min())
print("Maximum:",student_training_df['x1'].max())

"""---

#### 8. Scatter & Line Plots

Now you have to create the scatter plots and line plots between the following columns:

1. `y` and `x1`

2. `y` and `x2`

3. `y` and `x3`

4. `y` and `x4`

5. `y1` and `2 * x1 + 3 * x2 + 4 * x3 + 5 * x4`
"""

# Scatter plot between y and x1.
# Write your code here.
import matplotlib.pyplot as plt
plt.figure(figsize=(16, 4))
x_values_y=student_training_df['y']
y_values_x1=student_training_df['x1']
plt.scatter(x_values_y,y_values_x1)
#plt.title("Hi")
plt.show()

# Line plot between y and x1.
# Write your code here.
plt.figure(figsize=(16,4))
plt.plot(x_values_y,y_values_x1)
plt.show()

# Scatter plot between y and x2.
# Write your code here.
plt.figure(figsize=(16, 4))
x_values_y=student_training_df['y']
y_values_x2=student_training_df['x2']
plt.scatter(x_values_y,y_values_x2)
plt.show()

# Line plot between y and x2.
# Write your code here.
plt.figure(figsize=(16,16))
plt.plot(x_values_y,y_values_x2)
plt.show()

# Scatter plot between y and x3.
# Write your code here.
plt.figure(figsize=(16, 4))
x_values_y=student_training_df['y']
y_values_x3=student_training_df['x3']
plt.scatter(x_values_y,y_values_x3)
plt.show()

# Line plot between y and x3.
# Write your code here.
plt.figure(figsize=(16,16))
plt.plot(x_values_y,y_values_x3)
plt.show()

# Scatter plot between y and x4.
# Write your code here.
plt.figure(figsize=(16, 4))
x_values_y=student_training_df['y']
y_values_x4=student_training_df['x4']
plt.scatter(x_values_y,y_values_x4)
plt.show()

# Line plot between y and x4.
# Write your code here.
plt.figure(figsize=(16,16))
plt.plot(x_values_y,y_values_x4)
plt.show()

# Scatter plot between y and 2 * x1 + 3 * x2 + 4 * x3 + 5 * x4.
# Write your code here.
plt.figure(figsize=(16, 4))
x_values_y=student_training_df['y']
y_values_x=2*(student_training_df['x1'])+3*(student_training_df['x2'])+4*(student_training_df['x3'])+5*(student_training_df['x4'])
plt.scatter(x_values_y,y_values_x)
plt.show()

# Line plot between y and 2 * x1 + 3 * x2 + 4 * x3 + 5 * x4.
# Write your code here.
plt.figure(figsize=(16,16))
plt.plot(x_values_y,y_values_x)
plt.show()

"""---

---
"""